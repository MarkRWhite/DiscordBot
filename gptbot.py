import argparse
import logging
import discord
import json
import socket
from cryptography.fernet import Fernet
from discord.ext import commands
from botbase import BotBase
from helpers.encryption import get_env_key

class GPTBot(BotBase):
    """
    A subclass of Bot that implements ChatGPT bot specific commands.
    """

    def __init__(self, bot_id=None):
        super().__init__(bot_id)
        # Load the configuration
        with open('config.json') as f:
            self.config = json.load(f)
        # Get the GPT2Server credentials from the configuration
        self.host = self.config['GPT2Server']['host']
        self.port = self.config['GPT2Server']['port']
        # Generate a key and create a cipher object
        self.key = get_env_key().encode()  # Call the generate_key function and encode the result
        self.cipher_suite = Fernet(self.key)
        logging.info("Bot initialized.")

    def main_loop(self):
        """
        The main loop for the bot.
        """
        super().main_loop()

    @commands.command()
    async def chat(self, ctx, *, message):
        """
        Respond with a message generated by ChatGPT.
        """
        response = self.generate_response(message)
        await ctx.send(response)

    def generate_response(self, message):
        """
        Generate a response using ChatGPT.
        """
        # Create a socket object
        s = socket.socket()

        # Connect to the server
        s.connect((self.host, self.port))

        # Encrypt the message
        encrypted_msg = self.cipher_suite.encrypt(message.encode())

        # Send the message
        s.send(encrypted_msg)

        # Receive the response
        encrypted_response = s.recv(1024)

        # Decrypt the response
        response = self.cipher_suite.decrypt(encrypted_response)

        # Close the connection
        s.close()

        return response.decode()

    def initialize_bot_commands(self):
        """
        Initialize the bot commands.
        """
        super().initialize_bot_commands()

    async def on_ready(self):
        print(f"{self.__class__.__name__} has connected to Discord!")

    def shutdown(self):
        """
        Shutdown the bot.
        """
        super().shutdown()

    def process_message(self, message):
        """
        Process a message received from the manager.
        """
        super().process_message(message)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run a TestBot.")
    parser.add_argument( "--bot_id", help="The bot ID.")
    args = parser.parse_args()

    bot = GPTBot(bot_id=args.bot_id)
    bot.run()
